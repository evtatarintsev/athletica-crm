openapi: 3.0.0
info:
  title: Athletica CRM API
  description: API для взаимодействия с приложением AthleticaCRM
  version: 0.0.1
  contact:
    name: Татаринцев Евгений
    email: evtatarintsev@ya.ru

paths:
  /api/auth/login:
    post:
      operationId: login
      description: Получение токена авторизации
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /api/auth/refresh-token:
    post:
      operationId: refreshToken
      description: Обновление токена авторизации
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refresh successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /api/auth/logout:
    post:
      operationId: logout
      description: Выход из системы
      responses:
        '200':
          description: Logout successful

  /api/user-settings:
    description: Пользовательские настройки представляют собой key/value хранилище для каждого пользователя.
    get:
      operationId: getUserSettings
      description: Получить настройки по ключу.
      parameters:
        - name: key
          in: query
          required: true
          schema:
            type: string
          example: "name"
      responses:
        '200':
          description: Настройки успешно получены.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSetting'
    post:
      operationId: setUserSettings
      description: Сохранить настройки по ключу.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSetting'
      responses:
        '200':
          description: Настройки успешно сохранены

  /api/customers:
    get:
      operationId: getCustomersList
      description: Получить список клиентов организации
      parameters:
        - $ref: '#/components/parameters/LimitParameter'
        - $ref: '#/components/parameters/OffsetParameter'

      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerListResponse'

  /api/customers/add:
    post:
      operationId: addCustomer
      description: Добавить нового клиента
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomerRequest'
      responses:
        '200':
          description: Клиент успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomerResponse'

  /api/customers/{id}:
    get:
      operationId: getCustomerDetails
      description: Получить детальную информацию о клиенте
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetails'

components:
  parameters:
    LimitParameter:
      name: limit
      in: query
      description: Количество записей
      required: false
      schema:
        type: integer
        default: 10
        example: 10
    OffsetParameter:
      name: offset
      in: query
      description: Сдвиг от первой записи
      required: false
      schema:
        type: integer
        default: 0
        example: 0

  schemas:
    LoginRequest:
      type: object
      properties:
        login:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
      required:
        - login
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "Short-lived authentication bearer token"
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "Long-lived refresh token for obtaining new auth tokens"
      required:
        - token
        - refreshToken

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          description: "Refresh token for obtaining new auth tokens"
    UserSetting:
      type: object
      properties:
        key:
          type: string
          example: "name"
        value:
          type: object
          example: { }
      required:
        - key
        - value

    CustomerInList:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        fullName:
          type: string
          example: "John Smith"
        phone:
          type: string
          example: "+1 (555) 123-4567"
        birthday:
          type: string
          format: date
          example: "1990-01-01"

      required:
        - id
        - fullName

    CustomerListResponse:
      type: object
      properties:
        totalCount:
          description: Всего записей
          type: integer
          example: 100
        hasMore:
          description: Есть ли еще клиенты
          type: boolean
          example: true
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerInList'
      required:
        - totalCount
        - hasMore
        - customers

    AddCustomerRequest:
      type: object
      properties:
        fullName:
          type: string
          example: "John Smith"
        phone:
          type: string
          example: "+1 (555) 123-4567"
      required:
        - fullName

    AddCustomerResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        fullName:
          type: string
          example: "John Smith"
        phone:
          type: string
          example: "+1 (555) 123-4567"
      required:
        - id
        - fullName

    CustomerDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "123e4567-e89b-12d3-a456-426614174000"
        fullName:
          type: string
          example: "John Smith"
        phone:
          type: string
          example: "+1 (555) 123-4567"
        birthday:
          type: string
          format: date
          example: "1990-01-01"
        email:
          type: string
          example: "john.smith@example.com"
        address:
          type: string
          example: "123 Main St, Anytown, USA"
        notes:
          type: string
          example: "Regular customer, prefers evening appointments"
      required:
        - id
        - fullName
